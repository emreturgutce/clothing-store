# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  addressLines: String
  city: String
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  zipcode: Float
}

input AddressInput {
  addressLines: String
  city: String
  zipcode: Float
}

"""Avatar scalar type"""
scalar avatar

input CancelOrderInput {
  id: String
}

type Category {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input CategoryInput {
  name: String
}

input ChangePasswordInput {
  password: String
  token: String
}

type Comment {
  content: String
  createdAt: DateTime
  id: ID
  product: Product
  rate: Float
  updatedAt: DateTime
  user: User
}

input CompleteOrderInput {
  id: String
  token: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DetailInput {
  name: String
  phone: String
}

type ExternalEntity {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input LoginInput {
  email: String
  password: String
}

type Mutation {
  addAddress(data: AddressInput): Address
  addCategory(data: CategoryInput): Category
  addProduct(data: ProductInput): Product
  avatar(avatar: Upload): Boolean
  cancelOrder(data: CancelOrderInput): Order
  changePassword(data: ChangePasswordInput): Boolean
  commentProduct(content: String, productId: String): Product
  completeOrder(data: CompleteOrderInput): Order
  confirmEmail(token: String): Boolean
  createOrder(orderProducts: OrderInputs): Order
  delCategory(id: String): Boolean
  deleteAddress(addressId: String): Boolean
  deleteProduct(productId: String): Boolean
  delOrder(id: String): Boolean
  detail(data: DetailInput): User
  forgotPassword(email: String): Boolean
  login(data: LoginInput): User
  rateProduct(productId: String, rate: Float): Product
  register(data: RegisterInput): User
  updateAddress(addressId: String, data: OptionalAddressInput): Boolean
  updateCategory(data: CategoryInput, id: String): Boolean
  updateProduct(productId: String, productUpdateInput: ProductUpdateInput): Boolean
}

input OptionalAddressInput {
  addressLines: String
  city: String
  zipcode: Float
}

type Order {
  address: Address
  createdAt: DateTime
  expiresAt: Float
  id: ID
  orderProducts: [OrderProduct]
  payment: Payment
  status: String
  updatedAt: DateTime
  user: User
}

input OrderInputs {
  addressId: String
  orderProductInputs: [OrderProductInput]
}

type OrderProduct {
  createdAt: DateTime
  id: ID
  order: Order
  product: Product
  quantity: Float
  updatedAt: DateTime
}

input OrderProductInput {
  productId: String
  quantity: Float
}

type PaginatedProductsResponse {
  hasMore: Boolean
  items: [Product]
  total: Int
}

input PaginationInput {
  skip: Int
  take: Int
}

type Payment {
  createdAt: DateTime
  id: ID
  stripeId: String
  updatedAt: DateTime
}

type Product {
  averageRate: Float
  categories: [Category!]
  comments: [Comment!]
  count: Float
  createdAt: DateTime
  description: String
  id: ID
  name: String
  owner: User
  price: Float
  rate: [Int!]
  stock: Float
  updatedAt: DateTime
}

input ProductInput {
  categoryNames: [String!]
  description: String
  name: String
  price: Float
  stock: Float
}

input ProductUpdateInput {
  categoryNames: [String!]
  description: String
  name: String
  price: Float
  stock: Float
}

type Query {
  getAddressById(addressId: String): Address
  getAddressByUser(userId: String): [Address!]
  getCategories: [Category!]
  getCategoryById(id: String): Category
  getOrderById(id: String): Order
  getOrderByUser: [Order]
  getOrders: [Order!]
  getProductById(productId: String): Product
  getProductByUser(userId: String): [Product]
  getProducts(data: PaginationInput): PaginatedProductsResponse
  hello: String
  logout: Boolean
  me: User
}

input RegisterInput {
  email: String
  name: String
  password: String
  phone: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: avatar
  confirmed: Boolean
  createdAt: DateTime
  detail: UserDetail
  email: String
  id: ID
  orders: [Order!]
  products: [Product!]
  role: UserRole
  updatedAt: DateTime
}

type UserDetail {
  createdAt: DateTime
  id: ID
  name: String
  phone: String
  updatedAt: DateTime
}

type UserRole {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}
